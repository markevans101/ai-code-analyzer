from langchain_community.llms import Together
from langchain.agents import Tool, AgentExecutor, create_react_agent
from langchain.prompts import PromptTemplate
from langchain.tools import tool

class CodeAnalyzerAgent:
    def __init__(self, together_api_key):
        self.llm = Together(
            model="togethercomputer/llama-2-70b-chat",
            together_api_key=together_api_key,
            temperature=0.1,
            max_tokens=2048
        )
        
        self.tools = self._create_tools()
        self.agent = self._create_agent()
        
    def _create_tools(self):
        @tool
        def analyze_rag_implementation(code: str) -> str:
            """Analyzes code to identify RAG implementation patterns and best practices."""
            prompt = f"""You are an expert at analyzing RAG (Retrieval Augmented Generation) implementations.
            
            Analyze this code for RAG patterns:
            {code}
            
            Provide a detailed analysis focusing on:
            1. Retrieval implementation
            2. Vector store usage
            3. Embedding approach
            4. Query processing
            5. Result synthesis
            6. Error handling
            
            Format your response as JSON with these keys:
            - patterns_found
            - implementation_quality
            - suggestions
            """
            return self.llm.invoke(prompt)
            
        @tool
        def evaluate_code_quality(code: str) -> str:
            """Evaluates code quality and suggests improvements."""
            prompt = f"""You are an expert at evaluating code quality, especially for RAG implementations.
            
            Evaluate this code:
            {code}
            
            Focus on:
            1. RAG best practices
            2. Error handling
            3. Performance
            4. Modularity
            5. Documentation
            
            Format your response as JSON with these keys:
            - code_quality_score
            - strengths
            - weaknesses
            - improvement_suggestions
            """
            return self.llm.invoke(prompt)
            
        return [analyze_rag_implementation, evaluate_code_quality]
        
    def _create_agent(self):
        template = """Answer the following questions as best you can. You have access to the following tools:

{tools}

Use the following format:

Question: the input question you must answer
Thought: you should always think about what to do
Action: the action to take, should be one of [{tool_names}]
Action Input: the input to the action
Observation: the result of the action
... (this Thought/Action/Action Input/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question

Begin!

Question: {objective}

Code to analyze:
{code}

{agent_scratchpad}"""

        prompt = PromptTemplate.from_template(template)
        
        agent = create_react_agent(self.llm, self.tools, prompt)
        return AgentExecutor(agent=agent, tools=self.tools, verbose=True)
        
    def analyze(self, code, objective):
        """Run the agent to analyze code."""
        return self.agent.invoke({
            "objective": objective,
            "code": code
        })
